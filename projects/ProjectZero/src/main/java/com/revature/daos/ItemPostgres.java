package com.revature.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
//import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.postgresql.util.PSQLException;

import com.revature.models.Item;
import com.revature.models.Offer;
import com.revature.models.User;
//import com.revature.services.CustomerService;
import com.revature.util.ConnectionUtil;

public class ItemPostgres implements ItemDao {

	@Override
	public Item createItem(Item i) {
		String sql = "insert into items (item_name, item_description, item_availability) values (?,?,?) returning item_id;";
		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, i.getName());
			ps.setString(2, i.getDescription());
			ps.setInt(3, i.getAvailability());

			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if (rs.next()) {
				i.setId(rs.getInt("item_id"));
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return i;
	}


	@Override
	public int retrieveItemByOfferID(int offer_id) {
		String sql = "select i.item_id, i.item_name, o.offer_id from items i join offers o on o.requested_item_id = i.item_id where offer_id = ?;";
//		Item item = new Item();
		
		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, offer_id);
			
			ResultSet rs = ps.executeQuery();
			
			while (rs.next()) {
				Item i = new Item();
				i.setId(rs.getInt("requested_item_id"));
				i.setName(rs.getString("item_name"));
				
				Offer o = new Offer();
				o.setId(rs.getInt("offer_id"));
				
				i.setRequestedOffer(o);				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return offer_id;
	}

	@Override
	public Item retrieveItemByID(int item_id) {
		String sql = "select * from items where item_id = ?;";
		Item item = null;

		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, item_id); // this refers to the 1st ? in the sql String

			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				item = new Item();
				item.setId(rs.getInt("item_id"));
				item.setName(rs.getString("item_name"));
				item.setDescription(rs.getString("item_description"));
				item.setAvailability(rs.getInt("item_availability"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return item;
	}

	@Override
	public List<Item> retrieveItems() {
		String sql = "select * from items;";
		List<Item> items = new ArrayList<>();

		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);

			while (rs.next()) {
				Item i = new Item();
				i.setId(rs.getInt("item_id"));
				i.setName(rs.getString("item_name"));
				i.setDescription(rs.getString("item_description"));
				i.setAvailability(rs.getInt("item_availability"));

				items.add(i);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return items;
	}
	
	@Override
	public Item retrieveItemsByItem_Name(String item_name) {
		String sql = "select * from items where item_name = ?;";
		Item i = null;
		
		try (Connection c = ConnectionUtil.getConnectionFromEnv();){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, item_name); // this refers to the 1st "?" in the sql string, allows to inject data

			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				i = new Item();
				i.setId(rs.getInt("item_id"));
				i.setName(rs.getString("item_name"));
				i.setDescription(rs.getString("item_description"));
				i.setAvailability(rs.getInt("item_availability"));

			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return i;
	}

	@Override
	public boolean updateItem(int item_id) {
		String sql = "update items set item_availability = ? where item_id = ?;";
		int rowsChanged = -1;
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);			
			ps.setInt(1, 0);
			ps.setInt(2, item_id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
	

	@Override
	public boolean deleteItemById(int item_id) {
		String sql = "delete from items where item_id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, item_id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}


//	@Override
//	public boolean updateItem(Item i) {
//		// TODO Auto-generated method stub
//		return false;
//	}
}
